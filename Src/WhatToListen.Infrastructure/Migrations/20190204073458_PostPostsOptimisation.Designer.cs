// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WhatToListen.Infrastructure.Data;

namespace WhatToListen.Infrastructure.Migrations
{
    [DbContext(typeof(VkContext))]
    [Migration("20190204073458_PostPostsOptimisation")]
    partial class PostPostsOptimisation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("vk")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Album", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<long?>("PostId");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.Property<long?>("VkAlbumId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("InstanceId");

                    b.Property<string>("Raw");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Audio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Artist");

                    b.Property<int?>("GenreId");

                    b.Property<long?>("PostId");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Extentions");

                    b.Property<long?>("PostId");

                    b.Property<long?>("Size");

                    b.Property<string>("Title");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<string>("Description");

                    b.Property<long?>("PostId");

                    b.Property<string>("Title");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Page", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("PostId");

                    b.Property<string>("Title");

                    b.Property<string>("ViewUrl");

                    b.Property<long?>("Views");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Photo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Poll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<long?>("PostId");

                    b.Property<string>("Question");

                    b.Property<int?>("Votes");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Video", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Platform");

                    b.Property<long?>("PostId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.PhotoSize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AlbumId");

                    b.Property<int>("Height");

                    b.Property<long?>("LinkId");

                    b.Property<long?>("PhotoId");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("LinkId");

                    b.HasIndex("PhotoId");

                    b.ToTable("PhotoSize");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommentsCount");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Liks");

                    b.Property<long>("OwnerId");

                    b.Property<string>("PostType");

                    b.Property<int>("RepostsCount");

                    b.Property<string>("Text");

                    b.Property<int>("ViewsCount");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.PostPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("PostId");

                    b.Property<long>("UsersCount");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostPosts");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.PostUser", b =>
                {
                    b.Property<long>("PostId");

                    b.Property<long>("UserId");

                    b.Property<int>("Type");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostUsers");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Album", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Post")
                        .WithMany("Albums")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Audio", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Post")
                        .WithMany("Audios")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Document", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Post")
                        .WithMany("Documents")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Link", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Post")
                        .WithMany("Links")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Page", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Post")
                        .WithMany("Pages")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Photo", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Post")
                        .WithMany("Photos")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Poll", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Post")
                        .WithMany("Polls")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.Attachments.Video", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Post")
                        .WithMany("Videos")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.PhotoSize", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Attachments.Album")
                        .WithMany("Sizes")
                        .HasForeignKey("AlbumId");

                    b.HasOne("WhatToListen.Core.Entities.Vk.Attachments.Link")
                        .WithMany("Sizes")
                        .HasForeignKey("LinkId");

                    b.HasOne("WhatToListen.Core.Entities.Vk.Attachments.Photo")
                        .WithMany("Sizes")
                        .HasForeignKey("PhotoId");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.PostPost", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Post", "Post")
                        .WithMany("Posts")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("WhatToListen.Core.Entities.Vk.PostUser", b =>
                {
                    b.HasOne("WhatToListen.Core.Entities.Vk.Post", "Post")
                        .WithMany("Users")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WhatToListen.Core.Entities.Vk.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
